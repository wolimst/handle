import { getCodePointLength, toWord } from '.'
import type { Word } from './types'

describe('getCodePointLength(str: string) => number', () => {
  it('should return 0 for empty string', () => {
    expect(getCodePointLength('')).toBe(0)
  })

  it('should return correct code point length for Hangul', () => {
    // Syllable
    expect(getCodePointLength('Í∞Ä')).toBe(1)
    expect(getCodePointLength('Í∞Å')).toBe(1)
    expect(getCodePointLength('Í∞É')).toBe(1)
    expect(getCodePointLength('Í≥ø')).toBe(1)
    expect(getCodePointLength('ÍΩã')).toBe(1)
    expect(getCodePointLength('ÌïúÍ∏Ä')).toBe(2)
    expect(getCodePointLength('ÏãúÎÇòÎ∏åÎ°ú')).toBe(4)

    // Jamo
    expect(getCodePointLength('„Ñ±')).toBe(1)
    expect(getCodePointLength('„Ñ≤')).toBe(1)
    expect(getCodePointLength('„Ñ≥')).toBe(1)
    expect(getCodePointLength('„Öè')).toBe(1)
    expect(getCodePointLength('„Öò')).toBe(1)
    expect(getCodePointLength('„Ñ±„Öè')).toBe(2)
    expect(getCodePointLength('„Ñ±„Ñ±')).toBe(2)
    expect(getCodePointLength('„Ñ±„Öè„Öá')).toBe(3)

    // Syllable and Jamo
    expect(getCodePointLength('Í∞Ä„Ñ±')).toBe(2)
    expect(getCodePointLength('„Ñ±Í∞Ä')).toBe(2)
  })

  // Tests for non-Hangul string are skipped
})

describe('toWord(str: string) -> Word', () => {
  it('should return empty array for empty input', () => {
    expect(toWord('')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
  })

  it('should decompose syllables that contain 0 trailing consonant', () => {
    expect(toWord('Í∞Ä')).toStrictEqual<Word>({
      value: 'Í∞Ä',
      length: 1,
      syllables: [
        {
          value: 'Í∞Ä',
          leadingConsonant: '„Ñ±',
          vowels: ['„Öè'],
          trailingConsonants: [],
        },
      ],
    })
    expect(toWord('Ïö∞Î¶¨')).toStrictEqual<Word>({
      value: 'Ïö∞Î¶¨',
      length: 2,
      syllables: [
        {
          value: 'Ïö∞',
          leadingConsonant: '„Öá',
          vowels: ['„Öú'],
          trailingConsonants: [],
        },
        {
          value: 'Î¶¨',
          leadingConsonant: '„Ñπ',
          vowels: ['„Ö£'],
          trailingConsonants: [],
        },
      ],
    })
  })

  it('should decompose syllables that contain 2 vowels', () => {
    expect(toWord('ÏùòÏô∏')).toStrictEqual<Word>({
      value: 'ÏùòÏô∏',
      length: 2,
      syllables: [
        {
          value: 'Ïùò',
          leadingConsonant: '„Öá',
          vowels: ['„Ö°', '„Ö£'],
          trailingConsonants: [],
        },
        {
          value: 'Ïô∏',
          leadingConsonant: '„Öá',
          vowels: ['„Öó', '„Ö£'],
          trailingConsonants: [],
        },
      ],
    })
  })

  it('should decompose syllables that contain 1 trailing consonant', () => {
    expect(toWord('Íµ∞Î∞§')).toStrictEqual<Word>({
      value: 'Íµ∞Î∞§',
      length: 2,
      syllables: [
        {
          value: 'Íµ∞',
          leadingConsonant: '„Ñ±',
          vowels: ['„Öú'],
          trailingConsonants: ['„Ñ¥'],
        },
        {
          value: 'Î∞§',
          leadingConsonant: '„ÖÇ',
          vowels: ['„Öè'],
          trailingConsonants: ['„ÖÅ'],
        },
      ],
    })
  })

  it('should decompose syllables that contain 2 trailing consonants', () => {
    expect(toWord('ÏÇ∂')).toStrictEqual<Word>({
      value: 'ÏÇ∂',
      length: 1,
      syllables: [
        {
          value: 'ÏÇ∂',
          leadingConsonant: '„ÖÖ',
          vowels: ['„Öè'],
          trailingConsonants: ['„Ñπ', '„ÖÅ'],
        },
      ],
    })
  })

  it('should decompose syllables that contain double consonants, 1 vowel and 1 trailing consonant', () => {
    expect(toWord('Íª´Îπ¥')).toStrictEqual<Word>({
      value: 'Íª´Îπ¥',
      length: 2,
      syllables: [
        {
          value: 'Íª´',
          leadingConsonant: '„Ñ≤',
          vowels: ['„Öî'],
          trailingConsonants: ['„ÖÖ'],
        },
        {
          value: 'Îπ¥',
          leadingConsonant: '„ÖÉ',
          vowels: ['„Öè'],
          trailingConsonants: ['„ÖÜ'],
        },
      ],
    })
  })

  it('should decompose syllables that contain 2 vowels and 2 trailing consonants', () => {
    expect(toWord('Î∑Å')).toStrictEqual<Word>({
      value: 'Î∑Å',
      length: 1,
      syllables: [
        {
          value: 'Î∑Å',
          leadingConsonant: '„ÖÇ',
          vowels: ['„Öú', '„Öî'],
          trailingConsonants: ['„Ñπ', '„Ñ±'],
        },
      ],
    })
  })

  it('should ignore characters that are not Hangul syllables', () => {
    expect(toWord(' ')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
    expect(toWord('A')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
    expect(toWord('Aa')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
    expect(toWord('*„Ñ±„ÖèÍ∞Ä„ÅÇÊº¢üòä')).toStrictEqual<Word>({
      value: 'Í∞Ä',
      length: 1,
      syllables: [
        {
          value: 'Í∞Ä',
          leadingConsonant: '„Ñ±',
          vowels: ['„Öè'],
          trailingConsonants: [],
        },
      ],
    })
  })
})
