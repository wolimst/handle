import {
  FIRST_SYLLABLE,
  LAST_SYLLABLE,
  isHangul,
  getCodePointLength,
  toWord,
} from '.'
import type { Word } from './types'

describe('isHangul(str: string) => boolean', () => {
  it('should return true for empty string', () => {
    expect(isHangul('')).toBeTruthy()
  })

  it('should return true for Hangul string', () => {
    expect(isHangul('„Ñ±')).toBeTruthy()
    expect(isHangul('„Ñ≥')).toBeTruthy()
    expect(isHangul('„Öé')).toBeTruthy()
    expect(isHangul('„Öè')).toBeTruthy()
    expect(isHangul('„Öò')).toBeTruthy()
    expect(isHangul('„Ö£')).toBeTruthy()

    expect(isHangul(String.fromCodePoint(FIRST_SYLLABLE))).toBeTruthy()
    expect(isHangul('ÍΩã')).toBeTruthy()
    expect(isHangul(String.fromCodePoint(LAST_SYLLABLE))).toBeTruthy()

    expect(isHangul('„Ñ±„Öè')).toBeTruthy()
    expect(isHangul('„Ñ±„Ñ±')).toBeTruthy()
    expect(isHangul('„Ñ±„Öè„Öá')).toBeTruthy()

    expect(isHangul('Í∞Ä„Ñ±')).toBeTruthy()
    expect(isHangul('„Ñ±Í∞Ä')).toBeTruthy()

    expect(isHangul('Íµ¨Î¶Ñ')).toBeTruthy()
    expect(isHangul('Í∏¥ÏàòÏóºÍ≥†Îûò')).toBeTruthy()
  })

  it('should return false for string that contains non-Hangul string', () => {
    expect(isHangul('*')).toBeFalsy()
    expect(isHangul('Aa')).toBeFalsy()
    expect(isHangul('„ÅÇÊº¢')).toBeFalsy()
    expect(isHangul('üòä')).toBeFalsy()
    expect(isHangul('ÌïúÍ∏ÄAa„ÅÇÊº¢üòä')).toBeFalsy()
  })

  it('should return false for Hangul characters that cannot be input in Dubeolsik keyboard layout', () => {
    // Some of Hangul Jamo *clusters*
    // They are different characters from Jamo of Duboelsik keyboard input
    expect(isHangul('·ÑÄ')).toBeFalsy()
    expect(isHangul('·Ñí')).toBeFalsy()
    expect(isHangul('·Ö°')).toBeFalsy()
    expect(isHangul('·Öµ')).toBeFalsy()
    expect(isHangul('·Ü®')).toBeFalsy()
    expect(isHangul('·áÇ')).toBeFalsy()
    expect(isHangul('·Ñ´')).toBeFalsy()
    expect(isHangul('·Üã')).toBeFalsy()

    // Some of Hangul Jamo Extended-A unicode characters
    expect(isHangul('Í•†')).toBeFalsy()
    expect(isHangul('Í•™')).toBeFalsy()
    expect(isHangul('Í•º')).toBeFalsy()

    // Some of Hangul Jamo Extended-B unicode characters
    expect(isHangul('Ìû∞')).toBeFalsy()
    expect(isHangul('ÌüÜ')).toBeFalsy()
    expect(isHangul('Ìüª')).toBeFalsy()

    // Some of Obsolete Hangul characters
    expect(isHangul('„Ö•')).toBeFalsy()
    expect(isHangul('„ÜÖ')).toBeFalsy()
    expect(isHangul('„Üã')).toBeFalsy()
    expect(isHangul('„Üç')).toBeFalsy()
    expect(isHangul('„Üé')).toBeFalsy()
  })
})

describe('getCodePointLength(str: string) => number', () => {
  it('should return 0 for empty string', () => {
    expect(getCodePointLength('')).toBe(0)
  })

  it('should return correct code point length for Hangul', () => {
    // Syllable
    expect(getCodePointLength('Í∞Ä')).toBe(1)
    expect(getCodePointLength('Í∞Å')).toBe(1)
    expect(getCodePointLength('Í∞É')).toBe(1)
    expect(getCodePointLength('Í≥ø')).toBe(1)
    expect(getCodePointLength('ÍΩã')).toBe(1)
    expect(getCodePointLength('ÌïúÍ∏Ä')).toBe(2)
    expect(getCodePointLength('ÏãúÎÇòÎ∏åÎ°ú')).toBe(4)

    // Jamo
    expect(getCodePointLength('„Ñ±')).toBe(1)
    expect(getCodePointLength('„Ñ≤')).toBe(1)
    expect(getCodePointLength('„Ñ≥')).toBe(1)
    expect(getCodePointLength('„Öè')).toBe(1)
    expect(getCodePointLength('„Öò')).toBe(1)
    expect(getCodePointLength('„Ñ±„Öè')).toBe(2)
    expect(getCodePointLength('„Ñ±„Ñ±')).toBe(2)
    expect(getCodePointLength('„Ñ±„Öè„Öá')).toBe(3)

    // Syllable and Jamo
    expect(getCodePointLength('Í∞Ä„Ñ±')).toBe(2)
    expect(getCodePointLength('„Ñ±Í∞Ä')).toBe(2)
  })

  // Tests for non-Hangul string are skipped
})

describe('toWord(str: string) -> Word', () => {
  it('should return empty array for empty input', () => {
    expect(toWord('')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
  })

  it('should decompose syllables that contain 0 trailing consonant', () => {
    expect(toWord('Í∞Ä')).toStrictEqual<Word>({
      value: 'Í∞Ä',
      length: 1,
      syllables: [
        {
          value: 'Í∞Ä',
          leadingConsonant: '„Ñ±',
          vowels: ['„Öè'],
          trailingConsonants: [],
        },
      ],
    })
    expect(toWord('Ïö∞Î¶¨')).toStrictEqual<Word>({
      value: 'Ïö∞Î¶¨',
      length: 2,
      syllables: [
        {
          value: 'Ïö∞',
          leadingConsonant: '„Öá',
          vowels: ['„Öú'],
          trailingConsonants: [],
        },
        {
          value: 'Î¶¨',
          leadingConsonant: '„Ñπ',
          vowels: ['„Ö£'],
          trailingConsonants: [],
        },
      ],
    })
  })

  it('should decompose syllables that contain 2 vowels', () => {
    expect(toWord('ÏùòÏô∏')).toStrictEqual<Word>({
      value: 'ÏùòÏô∏',
      length: 2,
      syllables: [
        {
          value: 'Ïùò',
          leadingConsonant: '„Öá',
          vowels: ['„Ö°', '„Ö£'],
          trailingConsonants: [],
        },
        {
          value: 'Ïô∏',
          leadingConsonant: '„Öá',
          vowels: ['„Öó', '„Ö£'],
          trailingConsonants: [],
        },
      ],
    })
  })

  it('should decompose syllables that contain 1 trailing consonant', () => {
    expect(toWord('Íµ∞Î∞§')).toStrictEqual<Word>({
      value: 'Íµ∞Î∞§',
      length: 2,
      syllables: [
        {
          value: 'Íµ∞',
          leadingConsonant: '„Ñ±',
          vowels: ['„Öú'],
          trailingConsonants: ['„Ñ¥'],
        },
        {
          value: 'Î∞§',
          leadingConsonant: '„ÖÇ',
          vowels: ['„Öè'],
          trailingConsonants: ['„ÖÅ'],
        },
      ],
    })
  })

  it('should decompose syllables that contain 2 trailing consonants', () => {
    expect(toWord('ÏÇ∂')).toStrictEqual<Word>({
      value: 'ÏÇ∂',
      length: 1,
      syllables: [
        {
          value: 'ÏÇ∂',
          leadingConsonant: '„ÖÖ',
          vowels: ['„Öè'],
          trailingConsonants: ['„Ñπ', '„ÖÅ'],
        },
      ],
    })
  })

  it('should decompose syllables that contain double consonants, 1 vowel and 1 trailing consonant', () => {
    expect(toWord('Íª´Îπ¥')).toStrictEqual<Word>({
      value: 'Íª´Îπ¥',
      length: 2,
      syllables: [
        {
          value: 'Íª´',
          leadingConsonant: '„Ñ≤',
          vowels: ['„Öî'],
          trailingConsonants: ['„ÖÖ'],
        },
        {
          value: 'Îπ¥',
          leadingConsonant: '„ÖÉ',
          vowels: ['„Öè'],
          trailingConsonants: ['„ÖÜ'],
        },
      ],
    })
  })

  it('should decompose syllables that contain 2 vowels and 2 trailing consonants', () => {
    expect(toWord('Î∑Å')).toStrictEqual<Word>({
      value: 'Î∑Å',
      length: 1,
      syllables: [
        {
          value: 'Î∑Å',
          leadingConsonant: '„ÖÇ',
          vowels: ['„Öú', '„Öî'],
          trailingConsonants: ['„Ñπ', '„Ñ±'],
        },
      ],
    })
  })

  it('should ignore characters that are not Hangul syllables', () => {
    expect(toWord(' ')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
    expect(toWord('A')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
    expect(toWord('Aa')).toStrictEqual<Word>({
      value: '',
      length: 0,
      syllables: [],
    })
    expect(toWord('*„Ñ±„ÖèÍ∞Ä„ÅÇÊº¢üòä')).toStrictEqual<Word>({
      value: 'Í∞Ä',
      length: 1,
      syllables: [
        {
          value: 'Í∞Ä',
          leadingConsonant: '„Ñ±',
          vowels: ['„Öè'],
          trailingConsonants: [],
        },
      ],
    })
  })
})
