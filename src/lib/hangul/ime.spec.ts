// Syllable representation using Jamo types
// L: leading consonant
// V: vowel
// T: trailing consonant
// Example: 'ÌôòÍ≤Ω' -> LVVT/LVT
import { DubeolsikIME } from './ime'

describe('tests for DubeolsikIME class', () => {
  test('initial state', () => {
    const ime = new DubeolsikIME()
    expect(ime.value).toStrictEqual('')
  })

  describe('get value() => string & setValue(str: string) => boolean', () => {
    it('should return true and set the string for an Hangul string or an empty string', () => {
      const ime = new DubeolsikIME()
      expect(ime.setValue('„Ñ±')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Ñ±')
      expect(ime.setValue('„Ñ≥')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Ñ≥')
      expect(ime.setValue('„Öé')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Öé')
      expect(ime.setValue('„Öè')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Öè')
      expect(ime.setValue('„Öò')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Öò')
      expect(ime.setValue('„Ö£')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Ö£')
      expect(ime.setValue('„Ñ±„ÖÖ')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Ñ±„ÖÖ')
      expect(ime.setValue('„Öà„Öè„ÖÅ„Öó')).toBeTruthy()
      expect(ime.value).toStrictEqual('„Öà„Öè„ÖÅ„Öó')
      expect(ime.setValue('Í∞Ä')).toBeTruthy()
      expect(ime.value).toStrictEqual('Í∞Ä')
      expect(ime.setValue('ÍΩã')).toBeTruthy()
      expect(ime.value).toStrictEqual('ÍΩã')
      expect(ime.setValue('Íµ¨Î¶Ñ')).toBeTruthy()
      expect(ime.value).toStrictEqual('Íµ¨Î¶Ñ')
      expect(ime.setValue('Í∏¥ÏàòÏóºÍ≥†Îûò')).toBeTruthy()
      expect(ime.value).toStrictEqual('Í∏¥ÏàòÏóºÍ≥†Îûò')
      expect(ime.setValue('Í∞ÄÎÇòÎã§„Ñ≥„ÖòÍΩã')).toBeTruthy()
      expect(ime.value).toStrictEqual('Í∞ÄÎÇòÎã§„Ñ≥„ÖòÍΩã')
      expect(ime.setValue('')).toBeTruthy()
      expect(ime.value).toStrictEqual('')
    })

    it('should return false and cause no state change for an Hangul string that cannot be typed in using Dubeolsik keyboard layout', () => {
      const ime = new DubeolsikIME()
      expect(ime.setValue('·ÑÄ')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·Ñí')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·Ö°')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·Öµ')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·Ü®')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·áÇ')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·Ñ´')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('·Üã')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('Ìüª')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('„Ö•')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('„Üç')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('„Üé')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
    })

    it('should return false and cause no state change for a non-Hangul string', () => {
      const ime = new DubeolsikIME()
      expect(ime.setValue('*')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('Aa')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('„ÅÇÊº¢')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('üòä')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
      expect(ime.setValue('Í∏ÄÏûê„Öà„Öè„ÖÅ„ÖóAa„ÅÇÊº¢üòä')).toBeFalsy()
      expect(ime.value).toStrictEqual('')
    })
  })

  describe('type(jamo: DubeolsikJamo)', () => {
    test('Jamo should be added to empty ime value', () => {
      const ime = new DubeolsikIME()

      ime.type('„Ñ±')
      expect(ime.value).toStrictEqual('„Ñ±')

      ime.setValue('')
      ime.type('„Öè')
      expect(ime.value).toStrictEqual('„Öè')

      ime.setValue('')
      ime.type('„Ñ≤')
      expect(ime.value).toStrictEqual('„Ñ≤')
    })

    describe('typing one syllable', () => {
      test('LVTT', () => {
        const ime = new DubeolsikIME()
        ime.type('„Ñ±')
        expect(ime.value).toStrictEqual('„Ñ±')
        ime.type('„Öè')
        expect(ime.value).toStrictEqual('Í∞Ä')
        ime.type('„ÖÇ')
        expect(ime.value).toStrictEqual('Í∞ë')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('Í∞í')
      })

      test('LVVTT', () => {
        const ime = new DubeolsikIME()
        ime.type('„Ñ≤')
        expect(ime.value).toStrictEqual('„Ñ≤')
        ime.type('„Öó')
        expect(ime.value).toStrictEqual('Íº¨')
        ime.type('„Öè')
        expect(ime.value).toStrictEqual('ÍΩà')
        ime.type('„Ñ±')
        expect(ime.value).toStrictEqual('ÍΩâ')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('ÍΩã')
      })
    })

    describe('typing multiple syllables', () => {
      describe('previous syllable is not affected by following L', () => {
        test('LV + L -> LV/L', () => {
          const ime = new DubeolsikIME()
          ime.type('„Öá')
          ime.type('„Öè')
          ime.type('„ÖÉ')
          expect(ime.value).toStrictEqual('ÏïÑ„ÖÉ')
          ime.type('„Öè')
          expect(ime.value).toStrictEqual('ÏïÑÎπ†')
        })

        test('LVT + L -> LVT/L', () => {
          const ime = new DubeolsikIME()
          ime.setValue('Ìïú')
          ime.type('„Ñ±')
          expect(ime.value).toStrictEqual('Ìïú„Ñ±')
          ime.type('„Ö°')
          expect(ime.value).toStrictEqual('ÌïúÍ∑∏')
          ime.type('„Ñπ')
          expect(ime.value).toStrictEqual('ÌïúÍ∏Ä')
        })

        test('LVTT + L -> LVTT/L', () => {
          const ime = new DubeolsikIME()
          ime.setValue('Ïïâ')
          ime.type('„Ñ∑')
          expect(ime.value).toStrictEqual('Ïïâ„Ñ∑')
          ime.type('„Öè')
          expect(ime.value).toStrictEqual('ÏïâÎã§')
        })
      })

      describe('following L become T of previous syllable (ÎèÑÍπ®ÎπÑÎ∂à ÌòÑÏÉÅ)', () => {
        test('LVT + V -> LV/LV', () => {
          const ime = new DubeolsikIME()
          ime.setValue('Î∞î')
          ime.type('„Ñ∑')
          expect(ime.value).toStrictEqual('Î∞õ')
          ime.type('„Öè')
          expect(ime.value).toStrictEqual('Î∞îÎã§')
        })

        test('LVTT + V -> LVT/LV', () => {
          const ime = new DubeolsikIME()
          ime.setValue('ÏùÄ')
          ime.type('„Öé')
          expect(ime.value).toStrictEqual('ÏùÇ')
          ime.type('„Öñ')
          expect(ime.value).toStrictEqual('ÏùÄÌòú')
        })
      })

      describe('test some words', () => {
        test('ÎèÑÍπ®ÎπÑÎ∂à', () => {
          const ime = new DubeolsikIME()
          ime.type('„Ñ∑')
          expect(ime.value).toStrictEqual('„Ñ∑')
          ime.type('„Öó')
          expect(ime.value).toStrictEqual('ÎèÑ')
          ime.type('„Ñ≤')
          expect(ime.value).toStrictEqual('ÎèÜ')
          ime.type('„Öê')
          expect(ime.value).toStrictEqual('ÎèÑÍπ®')
          ime.type('„ÖÇ')
          expect(ime.value).toStrictEqual('ÎèÑÍππ')
          ime.type('„Ö£')
          expect(ime.value).toStrictEqual('ÎèÑÍπ®ÎπÑ')
          ime.type('„ÖÇ')
          expect(ime.value).toStrictEqual('ÎèÑÍπ®Îπï')
          ime.type('„Öú')
          expect(ime.value).toStrictEqual('ÎèÑÍπ®ÎπÑÎ∂Ä')
          ime.type('„Ñπ')
          expect(ime.value).toStrictEqual('ÎèÑÍπ®ÎπÑÎ∂à')
        })

        test('ÏÑúÏö∏ÌäπÎ≥ÑÏãú', () => {
          const ime = new DubeolsikIME()
          ime.type('„ÖÖ')
          expect(ime.value).toStrictEqual('„ÖÖ')
          ime.type('„Öì')
          expect(ime.value).toStrictEqual('ÏÑú')
          ime.type('„Öá')
          expect(ime.value).toStrictEqual('ÏÑ±')
          ime.type('„Öú')
          expect(ime.value).toStrictEqual('ÏÑúÏö∞')
          ime.type('„Ñπ')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏')
          ime.type('„Öå')
          expect(ime.value).toStrictEqual('ÏÑúÏöΩ')
          ime.type('„Ö°')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏Ìä∏')
          ime.type('„Ñ±')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏Ìäπ')
          ime.type('„ÖÇ')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏Ìäπ„ÖÇ')
          ime.type('„Öï')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏ÌäπÎ≤º')
          ime.type('„Ñπ')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏ÌäπÎ≥Ñ')
          ime.type('„ÖÖ')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏ÌäπÎ≥à')
          ime.type('„Ö£')
          expect(ime.value).toStrictEqual('ÏÑúÏö∏ÌäπÎ≥ÑÏãú')
        })
      })
    })

    describe('test cases containing non-syllables', () => {
      const ime = new DubeolsikIME()
      test('L + L -> TT', () => {
        ime.setValue('')
        ime.type('„Ñ±')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('„Ñ≥')

        ime.setValue('')
        ime.type('„Ñ¥')
        ime.type('„Öà')
        expect(ime.value).toStrictEqual('„Ñµ')

        ime.setValue('')
        ime.type('„Ñ¥')
        ime.type('„Öé')
        expect(ime.value).toStrictEqual('„Ñ∂')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„Ñ±')
        expect(ime.value).toStrictEqual('„Ñ∫')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„ÖÅ')
        expect(ime.value).toStrictEqual('„Ñª')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„ÖÇ')
        expect(ime.value).toStrictEqual('„Ñº')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('„ÑΩ')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„Öå')
        expect(ime.value).toStrictEqual('„Ñæ')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„Öç')
        expect(ime.value).toStrictEqual('„Ñø')

        ime.setValue('')
        ime.type('„Ñπ')
        ime.type('„Öé')
        expect(ime.value).toStrictEqual('„ÖÄ')

        ime.setValue('')
        ime.type('„ÖÇ')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('„ÖÑ')
      })

      test('L + L -> L/L', () => {
        ime.setValue('')
        ime.type('„Ñ±')
        ime.type('„Ñ±')
        expect(ime.value).toStrictEqual('„Ñ±„Ñ±')

        ime.setValue('')
        ime.type('„Ñ∑')
        ime.type('„Ñ∑')
        expect(ime.value).toStrictEqual('„Ñ∑„Ñ∑')

        ime.setValue('')
        ime.type('„ÖÇ')
        ime.type('„ÖÇ')
        expect(ime.value).toStrictEqual('„ÖÇ„ÖÇ')

        ime.setValue('')
        ime.type('„ÖÖ')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('„ÖÖ„ÖÖ')

        ime.setValue('')
        ime.type('„Öà')
        ime.type('„Öà')
        expect(ime.value).toStrictEqual('„Öà„Öà')

        ime.setValue('')
        ime.type('„Ñ±')
        ime.type('„Öá')
        expect(ime.value).toStrictEqual('„Ñ±„Öá')
      })

      test('TT + L -> TT/L', () => {
        ime.setValue('')
        ime.setValue('„Ñ≥')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('„Ñ≥„ÖÖ')

        ime.setValue('„Ñº')
        ime.type('„ÖÖ')
        expect(ime.value).toStrictEqual('„Ñº„ÖÖ')
      })

      test('TT + V -> L/LV', () => {
        ime.setValue('„Ñ≥')
        ime.type('„Öè')
        expect(ime.value).toStrictEqual('„Ñ±ÏÇ¨')
      })

      test('V + V -> VV', () => {
        ime.setValue('')
        ime.type('„Öó')
        ime.type('„Öè')
        expect(ime.value).toStrictEqual('„Öò')

        ime.setValue('')
        ime.type('„Öó')
        ime.type('„Öê')
        expect(ime.value).toStrictEqual('„Öô')

        ime.setValue('')
        ime.type('„Öó')
        ime.type('„Ö£')
        expect(ime.value).toStrictEqual('„Öö')

        ime.setValue('')
        ime.type('„Öú')
        ime.type('„Öì')
        expect(ime.value).toStrictEqual('„Öù')

        ime.setValue('')
        ime.type('„Öú')
        ime.type('„Öî')
        expect(ime.value).toStrictEqual('„Öû')

        ime.setValue('')
        ime.type('„Öú')
        ime.type('„Ö£')
        expect(ime.value).toStrictEqual('„Öü')

        ime.setValue('')
        ime.type('„Ö°')
        ime.type('„Ö£')
        expect(ime.value).toStrictEqual('„Ö¢')
      })

      test('V + V -> V/V', () => {
        ime.setValue('')
        ime.type('„Öè')
        ime.type('„Öè')
        expect(ime.value).toStrictEqual('„Öè„Öè')

        ime.setValue('')
        ime.type('„Öè')
        ime.type('„Ö£')
        expect(ime.value).toStrictEqual('„Öè„Ö£')

        ime.setValue('')
        ime.type('„Ö°')
        ime.type('„Öì')
        expect(ime.value).toStrictEqual('„Ö°„Öì')
      })

      test('VV + V -> VV/V', () => {
        ime.setValue('„Öò')
        ime.type('„Ö£')
        expect(ime.value).toStrictEqual('„Öò„Ö£')
      })

      test('V + T -> V/L', () => {
        ime.setValue('„Öè')
        ime.type('„Ñ±')
        expect(ime.value).toStrictEqual('„Öè„Ñ±')
      })

      test('VV + T -> VV/L', () => {
        ime.setValue('„Öò')
        ime.type('„Ñ±')
        expect(ime.value).toStrictEqual('„Öò„Ñ±')
      })
    })
  })

  test('delete()', () => {
    const ime = new DubeolsikIME()
    expect(ime.setValue('Í¥úÏ∞ÆÏïÑ')).toBeTruthy()
    expect(ime.value).toStrictEqual('Í¥úÏ∞ÆÏïÑ')

    ime.delete()
    expect(ime.value).toStrictEqual('Í¥úÏ∞Æ„Öá')
    ime.delete()
    expect(ime.value).toStrictEqual('Í¥úÏ∞Æ')
    ime.delete()
    expect(ime.value).toStrictEqual('Í¥úÏ∞¨')
    ime.delete()
    expect(ime.value).toStrictEqual('Í¥úÏ∞®')
    ime.delete()
    expect(ime.value).toStrictEqual('Í¥ú„Öä')
    ime.delete()
    expect(ime.value).toStrictEqual('Í¥ú')
    ime.delete()
    expect(ime.value).toStrictEqual('Í¥ò')
    ime.delete()
    expect(ime.value).toStrictEqual('Í≥†')
    ime.delete()
    expect(ime.value).toStrictEqual('„Ñ±')
    ime.delete()
    expect(ime.value).toStrictEqual('')
    ime.delete()
    expect(ime.value).toStrictEqual('')
  })

  describe('tests typing and deletion', () => {
    const ime = new DubeolsikIME()
    test('TT.delete() -> L.type(V) -> LV', () => {
      ime.setValue('„Ñ≥')
      expect(ime.value).toStrictEqual('„Ñ≥')

      ime.delete()
      expect(ime.value).toStrictEqual('„Ñ±')

      ime.type('„Öè')
      expect(ime.value).toStrictEqual('Í∞Ä')
    })

    test('LV.delete() -> L.type(L) -> TT', () => {
      ime.setValue('Í∞Ä')
      expect(ime.value).toStrictEqual('Í∞Ä')

      ime.delete()
      expect(ime.value).toStrictEqual('„Ñ±')

      ime.type('„ÖÖ')
      expect(ime.value).toStrictEqual('„Ñ≥')
    })

    test('TT.type(V) -> L/LV.delete() -> L/L.delete() -> L.type(V) -> LV', () => {
      ime.setValue('„Ñ≥')
      expect(ime.value).toStrictEqual('„Ñ≥')

      ime.type('„Öè')
      expect(ime.value).toStrictEqual('„Ñ±ÏÇ¨')

      ime.delete()
      expect(ime.value).toStrictEqual('„Ñ±„ÖÖ')

      ime.delete()
      expect(ime.value).toStrictEqual('„Ñ±')

      ime.type('„Öè')
      expect(ime.value).toStrictEqual('Í∞Ä')
    })
  })
})
